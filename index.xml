<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terminal</title><link>/</link><description>Recent content on Terminal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Intuitive explanation of Conditional Probability and Bayes theorem</title><link>/posts/bayes_theorem/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/bayes_theorem/</guid><description>Conditional probability So what does the equation P(A|B)=P(AnB)/P(A) tryinh to tell? consider venn-diagram chart as shown in the figure, We are trying to intuitively understand what P(A|B) means. P(A|B) ask a question &amp;ldquo;What is the probability of occurence of event A given that Event B has already occured?&amp;rdquo;. Now lets focus on the chart,imagine the let us imagine that i choosed one dot at random and i realized that the dot is from region covered by circle B, now what is the probability that the same dot lies inside the region covered by circle A?</description><content>&lt;h2 id="conditional-probability">Conditional probability&lt;/h2>
&lt;p>So what does the equation &lt;code>P(A|B)=P(AnB)/P(A)&lt;/code> tryinh to tell? consider venn-diagram chart as shown in the figure, We are trying to intuitively understand what &lt;code>P(A|B)&lt;/code> means. &lt;code>P(A|B)&lt;/code> ask a question &amp;ldquo;What is the probability of occurence of event &lt;code>A&lt;/code> given that Event B has already occured?&amp;rdquo;. Now lets focus on the chart,imagine the let us imagine that i choosed one dot at random and i realized that the dot is from region covered by circle &lt;code>B&lt;/code>, now what is the probability that the same dot lies inside the region covered by circle &lt;code>A&lt;/code>? or in other words what is &lt;code>P(A|B)&lt;/code>? lets suppose that the area cover by the region that lies in the intersection of the region A and B is 20 percent of the total region covered by circle &lt;code>B&lt;/code>, then we can easily say that &lt;code>P(A|B)=0.2&lt;/code>(i.e 20 %).
&lt;img src="https://github.com/Atomnp/Atomnp.github.io/blob/main/static/img/rectangle.png?raw=true" alt="A test image">&lt;/p>
&lt;p>for example: in the above figure Region &lt;code>AEFG&lt;/code>represents area covered by small rectange and region &lt;code>ABCD&lt;/code> represnets area covered by big rectangle then if i am choosing the dot at random, the probability that the dot lies is region inside small rectangle is given by &lt;code>(Area of small rectangle AEFG)/(Area of big rectangle ABCD) &lt;/code>assuming dots are uniformly distributed inside these region.&lt;/p>
&lt;p>Now how do we compute what portion of the region &lt;code>A&lt;/code> is covered by the intersecting region between region &lt;code>A&lt;/code> and &lt;code>B&lt;/code>? Yeah, we can calculate this by &lt;code>(Area of intersecting region)/(Area of region A)&lt;/code>.This is exactly how &lt;code>P(B|A)=P(AnB)/P(A)&lt;/code> is derived.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="bayes-theorem">Bayes Theorem&lt;/h2>
&lt;p>Now we are in the condition to get feeling for the equation
&lt;code>P(B|A)=P(AnB)/P(A)&lt;/code> and
&lt;code>P(A|B)=P(AnB)/P(B)&lt;/code>
by thinking about them in terms of area&lt;/p>
&lt;p>from above two equations we can easily derive that
&lt;code>P(A|B)=P(B|A)P(A)/P(B)&lt;/code>&lt;/p>
&lt;p>Now to intuitively understand this bayes therem there is nothing much to understand since we already understood conditional probability. just think about numerator as the area of the intersecting region beteween regions &lt;code>A&lt;/code> and &lt;code>B&lt;/code> and dividing by &lt;code>P(B)&lt;/code> is just asking what portion of the B&amp;rsquo;s region is covered by the intersection region between region &lt;code>A&lt;/code> and &lt;code>B&lt;/code>.&lt;/p>
&lt;h3 id="important-takeaways">important takeaways&lt;/h3>
&lt;p>&lt;code>P(A|B&lt;/code>) represents what portion of the B&amp;rsquo;s region is covered by intersection region betwenn region A and B&lt;/p>
&lt;p>so &lt;code>P(A|B)\*P(B)&lt;/code> translates to Area of the intersecting region&lt;/p>
&lt;p>and hence &lt;code>P(B|A)=P(A|B)\*P(B)/P(A)&lt;/code> gives the portion of A&amp;rsquo;s region covered by the intersecting region because numerator gives the area of intersection region.&lt;/p></content></item><item><title>About</title><link>/about/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hi, I&amp;rsquo;m Aayush 👋🏾 👩🏾‍💻 I&amp;rsquo;m a Computer engineering Student who is passionate about making open-source more accessible, creating technology to elevate people, and building community. Some technologies I enjoy working with include web development using Reactjs and Flask, Data science tools like numpy and pandas, Machine learning framework scikit-learn and deep learning frameworks such as Tensorflow and Pytorch.
Major interests: Swimming Driving Coding</description><content>&lt;h1 id="hi-im-aayush--">Hi, I&amp;rsquo;m Aayush 👋🏾 👩🏾‍💻&lt;/h1>
&lt;p>I&amp;rsquo;m a Computer engineering Student who is passionate about making open-source more accessible, creating technology to elevate people, and building community. Some technologies I enjoy working with include web development using Reactjs and Flask, Data science tools like numpy and pandas, Machine learning framework scikit-learn and deep learning frameworks such as Tensorflow and Pytorch.&lt;/p>
&lt;h2 id="major-interests">Major interests:&lt;/h2>
&lt;ul>
&lt;li>Swimming&lt;/li>
&lt;li>Driving&lt;/li>
&lt;li>Coding&lt;/li>
&lt;/ul>
&lt;hr></content></item><item><title>CV: Aayush Neupane</title><link>/cv/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>/cv/</guid><description>Personal Information Name: Aayush Neupane
Employment Status: Student
College: Pulchowk Campus, IOE
Undergraduate: Bachelor in Computer Engineering
Year: 3rd Year
Email:
neupane0403@gmail.com 075bct006.aayush@pcampus.edu.np Skills: Programming Languages -Python, C++, C and JavaScript Frameworks -Reactjs, Expressjs, Flask and Django Machine Learning : Beginner Deep Learning : Beginner Databases: Intermediate in SQL related databases and experienced in MongoDB Linux Adminstration and server management Version Control using Git Work Experince: Worked as a Full Stack Developer at Clamphook, an online entrance preparation website.</description><content>&lt;hr>
&lt;h3 id="personal-information">Personal Information&lt;/h3>
&lt;p>&lt;strong>Name:&lt;/strong> Aayush Neupane&lt;br>
&lt;strong>Employment Status:&lt;/strong> Student&lt;br>
&lt;strong>College:&lt;/strong> Pulchowk Campus, IOE&lt;br>
&lt;strong>Undergraduate:&lt;/strong> Bachelor in Computer Engineering&lt;br>
&lt;strong>Year:&lt;/strong> 3rd Year&lt;/p>
&lt;p>&lt;strong>Email:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="mailto:neupane0403@gmail.com">neupane0403@gmail.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="mailto:075bct006.aayush@pcampus.edu.np">075bct006.aayush@pcampus.edu.np&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="skills">Skills:&lt;/h4>
&lt;ul>
&lt;li>Programming Languages -Python, C++, C and JavaScript&lt;/li>
&lt;li>Frameworks -Reactjs, Expressjs, Flask and Django&lt;/li>
&lt;li>Machine Learning : Beginner&lt;/li>
&lt;li>Deep Learning : Beginner&lt;/li>
&lt;li>Databases: Intermediate in SQL related databases and experienced in MongoDB&lt;/li>
&lt;li>Linux Adminstration and server management&lt;/li>
&lt;li>Version Control using Git&lt;/li>
&lt;/ul>
&lt;h4 id="work-experince">Work Experince:&lt;/h4>
&lt;ul>
&lt;li>Worked as a &lt;strong>Full Stack Developer&lt;/strong> at &lt;strong>&lt;a href="https://clamphook.com/">Clamphook&lt;/a>&lt;/strong>, an online entrance preparation website.&lt;/li>
&lt;li>Freelancer at &lt;strong>&lt;a href="https://www.upwork.com/freelancers/~0105f236d2f4b5599f">Upwork&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="academic-and-non-academic-projects">Academic And Non Academic Projects:&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/Atomnp/Anubadak">Anubadak: interpreter implemented in C++&lt;/a>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Academic Project for Object Oriented Programming&lt;/li>
&lt;li>Simple interpreter for &lt;code>B&lt;/code> like language&lt;/li>
&lt;li>Uses common compiler design principles like lexical analysis, semantic analysis, Abstract Syntax Tree(AST)&lt;/li>
&lt;li>Translates Code into equivalent C++ code&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/ankitpaudel20/ComputerGraphicsProject">3D city visualization&lt;/a>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Academic Project for Computer Graphics&lt;/li>
&lt;li>Implemented using C++&lt;/li>
&lt;li>Renderer created from scratch which can render any 3D model&lt;/li>
&lt;li>implements Gourad shading and Phong shading&lt;/li>
&lt;li>implements Phong illumination model&lt;/li>
&lt;li>Blender for 3D model&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/Atomnp/Shell_from_scratch">Unix like shell from scratch&lt;/a>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Simple unix like shell implemented using C&lt;/li>
&lt;li>Using different system calls using &lt;code>C&lt;/code> api&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/Atomnp/algoVisualizerCPP">Sorting Visualizer&lt;/a>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Visualization of different sorting algorithms&lt;/li>
&lt;li>include visualization for Quicksort,Mergesort,Shellshort,Insertionsort etc.&lt;/li>
&lt;li>Implemented using C++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="links">Links:&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>GitHub&lt;/strong>: &lt;a href="https://github.com/Atomnp">https://github.com/Atomnp&lt;/a>&lt;/li>
&lt;li>&lt;strong>Stack Overflow&lt;/strong>: &lt;a href="https://stackoverflow.com/users/11594030/aayush-neupane">https://stackoverflow.com/users/11594030/aayush-neupane&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr></content></item><item><title>Create Your Own Unix Like Shell</title><link>/posts/shell_from_scratch/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>/posts/shell_from_scratch/</guid><description>Major concepts of shell shell is a interpreter that interprets our command and convert them to respective systemcall or start some process from binary. we type command in the terminal and shell gets its input from the terminal.
commands can be executed from shell in two ways one is to call the binary associated with the command, other is shell builtins, shell builtins are the command that live inside the shell code and our current process need not to fork before executing builtin command.</description><content>&lt;h3 id="major-concepts-of-shell">Major concepts of shell&lt;/h3>
&lt;p>shell is a interpreter that interprets our command and convert them to respective systemcall or start some process from binary.
we type command in the terminal and shell gets its input from the terminal.&lt;/p>
&lt;p>commands can be executed from shell in two ways one is to call the binary associated with the command, other is shell builtins, shell builtins are the command that live inside the shell code and our current process need not to fork before executing builtin command.&lt;/p>
&lt;h2 id="how-shell-executes-non-builtin-code">How shell executes non builtin code?&lt;/h2>
&lt;p>when we execute the command that is not a builtin command we use fork() syscall which creates two processes, one we call child process and other we call parent process, &lt;code>fork()&lt;/code> method returns two times once to the parent process and other to the child process,&lt;/p>
&lt;ul>
&lt;li>fork returns 0 to the child process.&lt;/li>
&lt;li>fork return process id of child to the parent process
so, by this return value of fork() method we can determing where we are in parent
process or child one.&lt;/li>
&lt;/ul>
&lt;p>Now that we have covered how fork() system call work we will now cover how does execution of non-builtin command take place in the shell. When we try to execute the non builtin command, our main process is forked into two processes child and parent, in the child process replaced by new process by &lt;code>exec()&lt;/code> system call. in the parent process we wait for child process to complete by using &lt;code>wait()&lt;/code> system call. The shell spawns a child process using exec and waits for it to complete, then continues with its own execution.&lt;/p>
&lt;p>when we call &lt;code>exec()&lt;/code> function in our code process calling the &lt;code>exec()&lt;/code> function is wiped out of the memory and replaced by the next process that we want to execute. so &lt;code>exec()&lt;/code> function never return except on error, and code below the exec function will never execute because the process that contain exec function is wiped out of the memory by the new process&lt;/p>
&lt;p>When you call a &lt;code>exec()&lt;/code> family method it doesn&amp;rsquo;t create a new process, instead &lt;code>exec()&lt;/code> replaces the current process memory and instruction set etc with the process you want to run.&lt;/p>
&lt;h3 id="shell-pipes">Shell Pipes&lt;/h3>
&lt;p>Pipes are the feature provided by an operating system for interprocess communication,The Unix/Linux systems allow stdout of a command to be connected to stdin of another command. We can make it do so by using the pipe character ‘|’.Pipe is used to combine two or more commands, and in this, the output of one command acts as input to another command, and this command’s output may act as input to the next command and so on&lt;/p>
&lt;p>in our shell we implemented this using two new system calls &lt;code>dup2()&lt;/code> and &lt;code>pipe()&lt;/code>&lt;/p>
&lt;p>&lt;code>dup2(int oldfd,int newfd)&lt;/code>:The dup() system call creates a copy of the file descriptor oldfd, using the newfd&lt;/p>
&lt;p>&lt;code>pipe(int pipefd[2])&lt;/code>:The array pipefd is used to
return two file descriptors referring to the ends of the pipe. pipefd[0] refers to the read end of the pipe. pipefd[1] refers to
the write end of the pipe.&lt;/p>
&lt;p>To implement pipes we loop through each pipelined command connecting stdout of one command to the std in of the other command, logic for this can be found in &lt;code>pipes_implementation.h&lt;/code> file of this project.&lt;/p>
&lt;h3 id="how-to-know-more-about-syscalls">How to know more about syscalls?&lt;/h3>
&lt;p>For specific syscalls&lt;/p>
&lt;ul>
&lt;li>man fork&lt;/li>
&lt;li>man exec&lt;/li>
&lt;li>main wait&lt;/li>
&lt;/ul>
&lt;p>To view all syscalls&lt;/p>
&lt;ul>
&lt;li>man syscalls&lt;/li>
&lt;/ul>
&lt;p>some useful links to understand why &lt;code>fork()&lt;/code> and &lt;code>exec()&lt;/code> calls are used to create new processes in unix based system&lt;/p>
&lt;p>&lt;a href="https://www.google.comhttps://askubuntu.com/a/428460/942407">Why use fork and exec?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://unix.stackexchange.com/a/136673/444490">why fork and exec?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/Atomnp/Shell_from_scratch">implementation code&lt;/a>&lt;/p></content></item><item><title>Showcase</title><link>/showcase/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>/showcase/</guid><description>Header 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec interdum metus. Aenean rutrum ligula sodales ex auctor, sed tempus dui mollis. Curabitur ipsum dui, aliquet nec commodo at, tristique eget ante. Donec quis dolor nec nunc mollis interdum vel in purus. Sed vitae leo scelerisque, sollicitudin elit sed, congue ante. In augue nisl, vestibulum commodo est a, tristique porttitor est. Proin laoreet iaculis ornare. Nullam ut neque quam.</description><content>&lt;h2 id="header-2">Header 2&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec interdum metus. Aenean rutrum ligula sodales ex auctor, sed tempus dui mollis. Curabitur ipsum dui, aliquet nec commodo at, tristique eget ante. &lt;strong>Donec quis dolor nec nunc mollis interdum vel in purus&lt;/strong>. Sed vitae leo scelerisque, sollicitudin elit sed, congue ante. In augue nisl, vestibulum commodo est a, tristique porttitor est. Proin laoreet iaculis ornare. Nullam ut neque quam.&lt;/p>
&lt;blockquote>
&lt;p>Fusce pharetra suscipit orci nec tempor. Quisque vitae sem sit amet sem mollis consequat. Sed at imperdiet lorem. Vestibulum pharetra faucibus odio, ac feugiat tellus sollicitudin at. Pellentesque varius tristique mi imperdiet dapibus. Duis orci odio, sodales lacinia venenatis sit amet, feugiat et diam.&lt;/p>
&lt;/blockquote>
&lt;h3 id="header-3">Header 3&lt;/h3>
&lt;p>Nulla libero turpis, lacinia vitae cursus ut, auctor dictum nisl. Fusce varius felis nec sem ullamcorper, at convallis nisi vestibulum. Duis risus odio, porta sit amet placerat mollis, tincidunt non mauris. Suspendisse fringilla, &lt;code>odio a dignissim pharetra&lt;/code>, est urna sollicitudin urna, eu scelerisque magna ex vitae tellus.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* PostCSS code */&lt;/span>
&lt;span style="color:#f92672">pre&lt;/span> {
&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#ae81ff">#1a1a1d&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;span style="color:#66d9ef">overflow&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;span style="color:#960050;background-color:#1e0010">@media&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(--phone)&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;span style="color:#66d9ef">white-space&lt;/span>: &lt;span style="color:#66d9ef">pre-wrap&lt;/span>;
&lt;span style="color:#66d9ef">word-wrap&lt;/span>: &lt;span style="color:#66d9ef">break-word&lt;/span>;
}
&lt;span style="color:#f92672">code&lt;/span> {
&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span> &lt;span style="color:#75715e">!important&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#ccc&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#66d9ef">inherit&lt;/span>;
}
&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#75715e">// JS code
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">menuTrigger&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;.menu-trigger&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">menu&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;.menu&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">mobileQuery&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getComputedStyle&lt;/span>(document.&lt;span style="color:#a6e22e">body&lt;/span>).&lt;span style="color:#a6e22e">getPropertyValue&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;--phoneWidth&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">isMobile&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; window.&lt;span style="color:#a6e22e">matchMedia&lt;/span>(&lt;span style="color:#a6e22e">mobileQuery&lt;/span>).&lt;span style="color:#a6e22e">matches&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">isMobileMenu&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;span style="color:#a6e22e">menuTrigger&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">toggle&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hidden&amp;#39;&lt;/span>, &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">isMobile&lt;/span>())
&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">toggle&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hidden&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">isMobile&lt;/span>())
}
&lt;span style="color:#a6e22e">isMobileMenu&lt;/span>()
&lt;span style="color:#a6e22e">menuTrigger&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">toggle&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hidden&amp;#39;&lt;/span>))
window.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;resize&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">isMobileMenu&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!-- HTML code --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
{{ range .Pages }}
{{ .Render &amp;#34;summary&amp;#34;}}
{{ end }}
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="header-4">Header 4&lt;/h4>
&lt;p>Curabitur scelerisque felis viverra varius scelerisque. Ut enim libero, molestie gravida blandit at, mollis ornare tellus. Cras arcu mi, ultrices vel pulvinar vel, volutpat eu tortor. Nullam nec eros quis massa ultrices iaculis sed in metus. Praesent sollicitudin sem sit amet orci tempor gravida.&lt;/p>
&lt;ul>
&lt;li>Maecenas elementum vitae nibh vitae porttitor.&lt;/li>
&lt;li>Aenean consequat, risus ut cursus placerat, arcu nulla sodales risus, ut molestie tellus tellus et dui.&lt;/li>
&lt;li>Integer imperdiet turpis vitae lacus imperdiet, ut ornare ligula auctor. Integer in mi eu velit vehicula suscipit eget vulputate nulla.&lt;/li>
&lt;li>Etiam vitae enim quis velit lobortis placerat a ut sem.
&lt;ul>
&lt;li>Curabitur lobortis ante sit amet orci pulvinar, sollicitudin viverra nunc accumsan.&lt;/li>
&lt;li>Praesent fermentum orci quis leo facilisis posuere.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Aliquam erat volutpat. In hac habitasse platea dictumst. Nunc ut tincidunt mauris. Sed at gravida risus, id semper magna. Nullam vitae enim mattis, sodales neque non, pharetra elit. Cras sit amet sagittis augue, et finibus turpis. Ut tempus tincidunt diam vel pharetra. Nulla porttitor odio sit amet nulla scelerisque, quis aliquam mi imperdiet. Sed tincidunt dui vel tellus vestibulum rhoncus. Donec tempus ultrices velit.&lt;/p></content></item></channel></rss>